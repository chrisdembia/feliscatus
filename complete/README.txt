Here, we briefly summarize the purpose of each file, and describe the relations
between the files. See file contents for more information.

All .cpp files become executables with the same name.

Modeling
========

FelisCatusModeling.h
--------------------
Encapsulates the creation of a cat model via a class named FelisCatusModeling,
and creates the elements that are common among all cat models. An executable
that creates a model should #include this file.

model_tree.cpp
--------------
Defines a class that extends the FelisCatusModeling class to optionally add a
variety of degrees of freedom, defined by Dembia and Sketch. This executable
actually generates many model files, not just one. All the models are fairly
distinct from the one described by Kane and Scher, 1969.

model_kanescherfig2.cpp [footnote 1]
------------------------------------
Creates a model based off that in Kane and Scher, 1969; figure 2.

model_kanescherfig3.cpp [footnote 1]
------------------------------------
Creates a model based off that in Kane and Scher, 1969; figure 3.

model_kaneschercombined.cpp [footnote 1]
----------------------------------------
Attempts to combine figures 2 and 3 from Kane and Scher, 1969.


Simulation
==========

simulate.cpp
------------
Simulates a cat fall, given a model file, for 1 second, using the SimTK
visualizer (as opposed to the OpenSim GUI visualizer).


Optimization
============

FelisCatusOptimizerSystem.h
---------------------------
Creates a subclass of SimTK::OptimizerSystem whose objective is to achieve a
cat flip, which does so by running forward simulations on a given cat model.
The parameters are the time histories of the actuation of the cat model.

There's another class in this file, FelisCatusOptimizerTool, whose purpose is
to define inputs/settings for the OptimizerSystem by parsing an XML input file.
The use of FelisCatusOptimizerTool is modeled roughly after the use of
OpenSim::AbstractTool subclasses.

optimize.cpp
------------
Given an XML input file, creates a FelisCatusOptimizerTool, and uses it to
instantiate a FelisCatusOptimizerSystem and a FelissCatusOptimizer, and run an
optimization. Manages some of the file output.

optimizer_tool_template.cpp
---------------------------
Prints a template XML file that can be passed to the 'optimize' executable.

feliscatusoptimizertool_initParams.xml
--------------------------------------
An example of a FunctionSet serialization that can be used to set initial
parameters in the optimization. NOTE: This is NOT a FelisCatusOptimizerTool
serialization/'optimize' input file. May need to be augmented depending on the
number of spline points used in the optimization ('num_optim_spline_points'),
and the actuators in the model being optimized.


Scripts
=======
plotActuation.py
----------------
An OpenSim GUI script that plots the functions in a given FunctionSet
serialization. Useful for visualizing intermediate ('best_yet') or final
('optimized' or 'last') results of an optimization.


Misc
====

batch.cpp
---------
Creates an 'optimize' input for each model generated by 'model_tree', to be
used perhaps for running the optimizations in parallel or on a remote computing
cluster.

prescribe.cpp
-------------
We considered trying to prescribe the motion of the cat, by setting the
PrescribedFunction of the coordinates, as an alternative to trying to determine
the actuation that would result in the desired motion. We did not end up using
this executable.


[footnote 1]
------------
This executable target is not built (commented-out in the
CMakeLists.txt) since we do not believe it completely implements Kane's model,
and so we never employed it in the optimization.

Authors: Sean Sketch & Chris Dembia
